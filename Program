public class Solution
{
	public Dictionary<int, int> TwoSum(int[] _nums, int _target)
	{
		Dictionary<int, int> result_ = new Dictionary<int, int>();

		for (int i = 0; i < _nums.Length; i++)
		{
			int mod_ = _target - _nums[i];
			if (_nums.Contains(mod_))
			{
				var y = Array.IndexOf(_nums, mod_);
				if (y >= i) result_.Add(i, y);
			}
		}
		return result_;
	}
	public int RomanToInteger(string _symbols)
	{
		int result_ = 0;
		Dictionary<char, int> dic_ = new Dictionary<char, int> { { 'I', 1 }, { 'V', 5 }, { 'X', 10 }, { 'L', 50 }, { 'C', 100 }, { 'D', 500 }, { 'M', 1000 } };
		for (int i = 0; i < _symbols.Length; i++)
		{
			int val_ = dic_[_symbols[i]];
			if (i < _symbols.Length - 1 && dic_[_symbols[i]] <= dic_[_symbols[i + 1]])
			{
				result_ = result_ - val_;
			}
			else
			{
				result_ = result_ + val_;
			}
		}
		return result_;
	}
}
